generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins", "postgresqlExtensions"]
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

enum PlacementPosition {
  LEFT
  RIGHT
}

enum Confirmation4Status {
  NONE
  PENDING
  CONFIRM
  BLOCK
}

model Admin {
  id       String  @id @default(uuid())
  username String  @unique(map: "index_admins_on_username") @db.Citext
  email    String  @unique(map: "index_admins_on_email") @db.Citext
  password String  @db.VarChar
  avatar   String? @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRcrrCHjN9kChJVJtWxXCHoUcgEhxWwTclnURuK20T8EDX_rVt0NMik5tYpLhKzqPBnvP0&usqp=CAU")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  adminNotes AdminNotes[]

  @@map("admins")
}

model Member {
  id                     String             @id @default(uuid())
  username               String             @unique(map: "index_members_on_username") @db.Citext
  fullName               String             @db.VarChar
  sponsorId              String?            @db.VarChar
  userId                 Int                @unique(map: "index_members_on_userId") @db.Integer
  email                  String             @unique(map: "index_members_on_email") @db.Citext
  mobile                 String             @db.VarChar
  assetId                String?            @db.VarChar
  primaryAddress         String             @db.VarChar
  secondaryAddress       String?            @db.VarChar
  city                   String?            @db.VarChar
  state                  String?            @db.VarChar
  zipCode                String?            @db.VarChar
  password               String             @default("$2a$12$iJYYra5MuxOQ9AwyG5CQauqCoE0NnSWHb7PzicO2C3L2/0J2VkQaO") @db.VarChar
  token                  String?            @unique(map: "index_members_on_token") @db.VarChar
  placementParentId      String?            @db.VarChar
  placementPosition      PlacementPosition? @default(LEFT)
  point                  Int                @default(0)
  status                 Boolean            @default(true) @db.Boolean
  signupFormRequest      Json?              @db.Json
  emailVerified          Boolean            @default(true) @db.Boolean
  introducerCount        Int                @default(0) @db.Integer
  totalIntroducers       Int                @default(0) @db.Integer
  freeShareSaleCount     Int                @default(0) @db.Integer
  syncWithSendy          Boolean            @default(true)
  preferredContact       String?
  preferredContactDetail String?
  currentL               Int?               @default(0)
  currentR               Int?               @default(0)

  sponsor         Member? @relation("MemberSponsor", fields: [sponsorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  placementParent Member? @relation("MemberPlacementParent", fields: [placementParentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  sales             Sale[]
  statistics        MemberStatistics[]
  introduceMembers  Member[]           @relation("MemberSponsor")
  memberWallets     MemberWallet[]
  placementChildren Member[]           @relation("MemberPlacementParent")
  WeeklyCommission  WeeklyCommission[]
  adminNotes        AdminNotes[]

  @@map("members")
}

model Sale {
  id            String   @id @default(uuid())
  memberId      String
  packageId     String
  paymentMethod String
  orderedAt     DateTime @default(now())
  status        Boolean  @default(true)
  freeShareSale Boolean  @default(false) @db.Boolean
  note          String?

  member  Member?  @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  package Package? @relation(fields: [packageId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  statisticsSales StatisticsSale[]
  fileSales       FileSale[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([memberId], map: "index_sales_on_memberId")
  @@index([packageId], map: "index_sales_on_packageId")
  @@map("sales")
}

model Statistics {
  id             String  @id @default(uuid())
  newBlocks      Int
  totalBlocks    Int
  totalHashPower Int
  totalMembers   Int?
  status         Boolean @default(true)
  txcShared      BigInt  @default(0)
  transactionId  String? @unique(map: "index_statistics_on_transactionId")

  issuedAt DateTime @default(now())
  from     DateTime
  to       DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //Relations
  memberStatistics MemberStatistics[]
  statisticsSales  StatisticsSale[]

  @@map("statistics")
}

model MemberStatistics {
  id           String   @id @default(uuid())
  memberId     String
  statisticsId String
  txcShared    BigInt
  hashPower    Int
  percent      Int
  issuedAt     DateTime @default(now())

  member     Member     @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  statistics Statistics @relation(fields: [statisticsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  memberStatisticsWallets MemberStatisticsWallet[]

  @@index([memberId], map: "index_memberStatistics_on_memberId")
  @@index([statisticsId], map: "index_memberStatistics_on_statisticsId")
  @@map("member_statistics")
}

model StatisticsSale {
  id           String @id @default(uuid())
  statisticsId String
  saleId       String

  issuedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //Relations
  statistics Statistics @relation(fields: [statisticsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sale       Sale       @relation(fields: [saleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([statisticsId], map: "index_statisticssale_on_statisticsId")
  @@index([saleId], map: "index_statisticssale_on_saleId")
  @@map("statistics_sale")
}

model Block {
  id         String @id @default(uuid())
  blockNo    Int
  hashRate   Float
  difficulty Float

  issuedAt DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([blockNo], map: "index_blocks_on_block_number")
  @@map("blocks")
}

model DailyBlock {
  id         String @id @default(uuid())
  hashRate   Float
  difficulty Float

  issuedAt DateTime @unique(map: "index_issuedAt_on_dailyblocks") @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("dailyblocks")
}

model WeeklyBlock {
  id         String @id @default(uuid())
  hashRate   Float
  difficulty Float

  issuedAt DateTime @unique(map: "index_issuedAt_on_weeklyblocks") @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("weeklyblocks")
}

model MonthlyBlock {
  id         String @id @default(uuid())
  hashRate   Float
  difficulty Float

  issuedAt DateTime @unique(map: "index_issuedAt_on_monthlyblocks") @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("monthlyblocks")
}

model Package {
  id               String   @id @default(uuid())
  productName      String
  amount           Int
  status           Boolean  @default(true)
  date             DateTime @default(now())
  token            Int
  point            Int      @default(0)
  enrollVisibility Boolean  @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relation
  sales Sale[]

  @@map("packages")
}

model Payout {
  id      String  @id @default(uuid())
  method  String
  status  Boolean @default(true)
  name    String
  display String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // relation
  memberWallets MemberWallet[]

  @@map("payouts")
}

model MemberWallet {
  id       String  @id @default(uuid())
  memberId String
  payoutId String
  address  String
  percent  Int     @default(0)
  note     String?

  member Member? @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payout Payout? @relation(fields: [payoutId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  memberStatisticsWallets MemberStatisticsWallet[]

  @@unique([memberId, payoutId, address], map: "unique_index_on_memberwallets")
  @@map("memberwallets")
}

model MemberStatisticsWallet {
  id                String   @id @default(uuid())
  memberStatisticId String
  memberWalletId    String
  issuedAt          DateTime @default(now())
  txc               BigInt   @default(0)

  memberStatistic MemberStatistics? @relation(fields: [memberStatisticId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  memberWallet    MemberWallet?     @relation(fields: [memberWalletId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("memberstatisticswallets")
}

model WeeklyCommission {
  id            String              @id @default(uuid())
  weekStartDate DateTime
  begL          Int                 @default(0)
  begR          Int                 @default(0)
  newL          Int                 @default(0)
  newR          Int                 @default(0)
  maxL          Int                 @default(0)
  maxR          Int                 @default(0)
  endL          Int                 @default(0)
  endR          Int                 @default(0)
  pkgL          Int                 @default(0)
  pkgR          Int                 @default(0)
  commission    Int                 @default(0)
  memberId      String
  status        Confirmation4Status @default(NONE)
  note          String?             @default("")

  member Member? @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("weeklycommissions")
}

model AdminNotes {
  id          String @id @default(uuid())
  memberId    String
  adminId     String
  description String

  member Member? @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  admin  Admin?  @relation(fields: [adminId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("adminnotes")
}

model File {
  id           String  @id @default(uuid())
  url          String
  originalName String
  mimeType     String
  size         Int
  localPath    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  fileSale FileSale?

  @@map("files")
}

model FileSale {
  id     String @id @default(uuid())
  saleId String
  fileId String

  sale Sale? @relation(fields: [saleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  file File? @relation(fields: [fileId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([fileId], map: "unique_index_on_filesale")
  @@map("filesales")
}
